1. Описание Design Pattern через призму инкапсуляции

Инкапсуляция — это один из основных принципов объектно-ориентированного программирования, который подразумевает скрытие внутренней реализации объекта и предоставление доступа к его функциональности через четко определенные интерфейсы. В контексте паттернов проектирования инкапсуляция играет ключевую роль, так как многие из них направлены на организацию кода таким образом, чтобы уменьшить связанность и повысить гибкость системы.

Примеры теоретического использования:

Фабрика (Factory Pattern): Инкапсулирует создание объектов, позволяя клиентскому коду не беспокоиться о том, как именно создаются объекты. Это позволяет легко менять классы объектов без изменения клиентского кода.

Стратегия (Strategy Pattern): Позволяет инкапсулировать различные алгоритмы и делать их взаимозаменяемыми. Клиентский код может использовать разные стратегии без необходимости знать детали их реализации.

Декоратор (Decorator Pattern): Инкапсулирует добавление новых функциональностей к объектам, позволяя динамически изменять поведение объектов.

Задачи, которые могут решаться с помощью инкапсуляции в паттернах проектирования:

Снижение связанности между компонентами системы.

Упрощение тестирования и сопровождения кода.

Повышение гибкости и расширяемости системы.

Защита данных и обеспечение целостности состояния объектов.

2. Singleton

Паттерн Singleton — это паттерн проектирования, который гарантирует, что класс имеет только один экземпляр и предоставляет глобальную точку доступа к этому экземпляру. 

Применение:

Управление доступом к ресурсам, которые могут быть созданы только в одном экземпляре (например, соединение с базой данных).

Логирование, где требуется единый лог-файл для записи всех событий.

Пример:

public class Singleton {
    private static Singleton instance;

    private Singleton() 
    {
        //Хрень
    }

    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
}

public class Main {
    public static void main(String[] args) {
        Singleton singleton1 = Singleton.getInstance();
        Singleton singleton2 = Singleton.getInstance();
        
        System.out.println(singleton1 == singleton2);
    }
}

▎3. 5 признаков сложных систем по Гради Бучу

Гради Буч выделяет пять признаков сложных систем:

1) Модульность: Система состоит из отдельных компонентов (модулей), которые могут быть разработаны и протестированы независимо.

2) Инкапсуляция: Каждый модуль скрывает свою внутреннюю реализацию от других модулей, предоставляя только необходимые интерфейсы.

3) Сложная взаимосвязь: Модули взаимодействуют друг с другом через четко определенные интерфейсы, но могут иметь сложные связи.

4) Изменяемость: Система должна быть способна адаптироваться к изменениям требований без значительных затрат времени и ресурсов.

5) Эмерджентное поведение: Поведение системы может быть неочевидным и возникать из взаимодействия ее компонентов.

▎4. Процедурная декомпозиция

Процедурная декомпозиция — это метод разработки программного обеспечения, который предполагает разбиение задачи на более мелкие подзадачи или процедуры. Каждая процедура выполняет конкретную функцию и может быть вызвана из других частей программы. Этот подход помогает упростить структуру программы, улучшает читаемость и повторное использование кода.

▎5. Динамический полиморфизм

Динамический полиморфизм — это способность объекта принимать множество форм в зависимости от контекста выполнения. В объектно-ориентированном программировании это достигается через использование виртуальных методов и наследования. Динамический полиморфизм позволяет вызывать методы производного класса через ссылку базового класса во время выполнения программы.

Пример:
class Animal {
    void speak() {
        System.out.println("Animal speaks");
    }
}

class Dog extends Animal {
    void speak() {
        System.out.println("Woof!");
    }
}

class Cat extends Animal {
    void speak() {
        System.out.println("Meow!");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal myDog = new Dog();
        Animal myCat = new Cat();

        myDog.speak();
        myCat.speak();
    }
}

6.Инкапсуляция — это принцип сокрытия внутреннего состояния объекта и предоставления доступа к нему через методы.
